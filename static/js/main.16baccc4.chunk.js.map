{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","blurVal","setBlurVal","brightVal","setBrightVal","useFileUpload","files","selectFiles","Jumbotron","Container","style","paddingLeft","Button","onClick","accept","marginBottom","autoHeight","id","src","source","alt","filter","axis","xstep","xmin","xmax","x","onChange","parseFloat","parseInt","domtoimage","toJpeg","document","getElementById","quality","then","dataUrl","link","createElement","download","Date","valueOf","href","click","marginTop","position","bottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0RAyFeA,MAhFf,WAAgB,IAAD,EACiBC,mBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEqBF,mBAAS,KAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGgBC,YAAc,MAH9B,mBAGNC,EAHM,KAGCC,EAHD,KAgBb,OACE,qCACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,gEACA,sGAGE,uBAHF,mIAQJ,sBAAKC,MAAO,CAAEC,YAAa,OAA3B,UACE,gCACE,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMN,EAAY,CAAEO,OAAQ,aAAcJ,MAAO,CAACK,aAAc,QAAjF,0BAGA,yCACA,cAAC,aAAD,CAAYC,YAAU,EAAtB,SACGV,EACC,qBACEW,GAAG,mBACHC,IAAG,OAAEZ,QAAF,IAAEA,OAAF,EAAEA,EAAOa,OACZC,IAAI,UACJV,MAAO,CACLW,OAAO,QAAD,OAAUpB,EAAV,0BAAmCE,EAAnC,SAIV,oEAIN,gCACE,gCACE,sCACA,cAAC,IAAD,CACEmB,KAAK,IACLC,MAAO,GACPC,KAAM,EACNC,KAAM,GACNC,EAAGzB,EACH0B,SAAU,gBAAGD,EAAH,EAAGA,EAAH,OAAWxB,EAAW0B,WAAWF,UAG/C,gCACE,4CACA,cAAC,IAAD,CACEJ,KAAK,IACLE,KAAM,EACNC,KAAM,IACNC,EAAGvB,EACHwB,SAAU,gBAAGD,EAAH,EAAGA,EAAH,OAAWtB,EAAayB,SAASH,EAAG,WAGlD,cAACd,EAAA,EAAD,CAAQC,QAAS,WAlEvBiB,IACGC,OAAOC,SAASC,eAAe,oBAAqB,CAAEC,QAAS,KAC/DC,MAAK,SAASC,GACb,IAAMC,EAAOL,SAASM,cAAc,KACpCD,EAAKE,SAAL,WAAmB,IAAIC,MAAOC,UAA9B,QACAJ,EAAKK,KAAON,EACZC,EAAKM,YA4DgCjC,MAAO,CAACkC,UAAW,QAAtD,yBAEF,qBAAKlC,MAAO,CAAEmC,SAAU,WAAYC,OAAQ,GAA5C,yCCvEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzB,SAASC,eAAe,SAM1Bc,M","file":"static/js/main.16baccc4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport Slider from \"react-input-slider\";\nimport { useFileUpload } from \"use-file-upload\";\nimport domtoimage from \"dom-to-image\";\nimport { Button, Jumbotron, Container } from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [blurVal, setBlurVal] = useState(0.0);\n  const [brightVal, setBrightVal] = useState(100);\n  const [files, selectFiles] = useFileUpload(null);\n\n  const download = () => {\n    domtoimage\n      .toJpeg(document.getElementById(\"download-element\"), { quality: 0.90 })\n      .then(function(dataUrl) {\n        const link = document.createElement(\"a\");\n        link.download = `${new Date().valueOf()}.jpg`;\n        link.href = dataUrl;\n        link.click();\n      });\n  };\n\n  return (\n    <>\n      <Jumbotron>\n        <Container>\n          <h3>Background Creatorüõ†</h3>\n          <p>\n            Let's edit blur and brightness of the image to create the\n            background.\n            <br />\n            „Åº„Åã„Åó„Å®Êöó„Åï„ÇíÁ∑®ÈõÜ„Åó„Å¶ËÉåÊôØ„Çí‰ΩúÊàê„Åó„Çà„ÅÜ„ÄÇ\n          </p>\n        </Container>\n      </Jumbotron>\n      <div style={{ paddingLeft: \"10%\" }}>\n        <div>\n          <Button onClick={() => selectFiles({ accept: \"image/*\" })} style={{marginBottom: '10px'}}>\n            Upload Image\n          </Button>\n          <h4>Preview</h4>\n          <Scrollbars autoHeight>\n            {files ? (\n              <img\n                id=\"download-element\"\n                src={files?.source}\n                alt=\"preview\"\n                style={{\n                  filter: `blur(${blurVal}px) brightness(${brightVal}%)`,\n                }}\n              />\n            ) : (\n              <div>Upload image before editing.</div>\n            )}\n          </Scrollbars>\n        </div>\n        <div>\n          <div>\n            <h4>Blur</h4>\n            <Slider\n              axis=\"x\"\n              xstep={0.1}\n              xmin={0}\n              xmax={20}\n              x={blurVal}\n              onChange={({ x }) => setBlurVal(parseFloat(x))}\n            />\n          </div>\n          <div>\n            <h4>Brightness</h4>\n            <Slider\n              axis=\"x\"\n              xmin={0}\n              xmax={100}\n              x={brightVal}\n              onChange={({ x }) => setBrightVal(parseInt(x, 10))}\n            />\n          </div>\n          <Button onClick={() => download()} style={{marginTop: '10px'}}>Download</Button>\n        </div>\n        <div style={{ position: \"absolute\", bottom: 1 }}>¬© 2020 izumiz-dev</div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}