{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","blurVal","setBlurVal","brightVal","setBrightVal","useFileUpload","files","selectFiles","Jumbotron","Container","style","paddingLeft","Button","onClick","accept","autoHeight","id","src","source","alt","filter","axis","xstep","xmin","xmax","x","onChange","parseFloat","parseInt","domtoimage","toJpeg","document","getElementById","quality","then","dataUrl","link","createElement","download","Date","valueOf","href","click","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0RAuFeA,MA9Ef,WAAgB,IAAD,EACiBC,mBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEqBF,mBAAS,KAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGgBC,YAAc,MAH9B,mBAGNC,EAHM,KAGCC,EAHD,KAkBb,OACE,eAAC,WAAD,WACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,oDACA,+GAMJ,sBAAKC,MAAO,CAACC,YAAa,OAA1B,UACA,gCACE,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMN,EAAY,CAAEO,OAAQ,aAA7C,0BAGA,cAAC,aAAD,CAAYC,YAAU,EAAtB,SACGT,EACC,qBACEU,GAAG,mBACHC,IAAG,OAAEX,QAAF,IAAEA,OAAF,EAAEA,EAAOY,OACZC,IAAI,UACJT,MAAO,CACLU,OAAO,QAAD,OAAUnB,EAAV,0BAAmCE,EAAnC,SAIR,oEAIR,gCACE,gCACE,sCACA,cAAC,IAAD,CACEkB,KAAK,IACLC,MAAO,GACPC,KAAM,EACNC,KAAM,GACNC,EAAGxB,EACHyB,SAAU,gBAAGD,EAAH,EAAGA,EAAH,OAAWvB,EAAWyB,WAAWF,EAAG,WAGlD,gCACE,4CACA,cAAC,IAAD,CACEJ,KAAK,IACLE,KAAM,EACNC,KAAM,IACNC,EAAGtB,EACHuB,SAAU,gBAAGD,EAAH,EAAGA,EAAH,OAAWrB,EAAawB,SAASH,EAAG,WAGlD,cAACb,EAAA,EAAD,CAAQC,QAAS,WAjErBgB,IACGC,OAAOC,SAASC,eAAe,oBAAqB,CAAEC,QAAS,IAC/DC,MAAK,SAAUC,GACd,IAAIC,EAAOL,SAASM,cAAc,KAClCD,EAAKE,SAAL,WAAmB,IAAIC,MAAOC,UAA9B,QACAJ,EAAKK,KAAON,EACZC,EAAKM,YA2DL,gCCpEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASC,eAAe,SAM1BW,M","file":"static/js/main.75e383df.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport Slider from \"react-input-slider\";\nimport { useFileUpload } from \"use-file-upload\";\nimport domtoimage from \"dom-to-image\";\nimport { Button, Jumbotron, Container } from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [blurVal, setBlurVal] = useState(0.0);\n  const [brightVal, setBrightVal] = useState(100);\n  const [files, selectFiles] = useFileUpload(null);\n\n  const download = () => {\n    domtoimage\n      .toJpeg(document.getElementById(\"target-component\"), { quality: 1.0 })\n      .then(function (dataUrl) {\n        var link = document.createElement(\"a\");\n        link.download = `${new Date().valueOf()}.png`;\n        link.href = dataUrl;\n        link.click();\n      });\n  };\n\n  // console.log('files', files)\n\n  return (\n    <Fragment>\n      <Jumbotron>\n        <Container>\n          <h1>Background Creator</h1>\n          <p>\n            Let's edit the blur and brightness of the image to create the\n            background.\n          </p>\n        </Container>\n      </Jumbotron>\n      <div style={{paddingLeft: '10%'}}>\n      <div>\n        <Button onClick={() => selectFiles({ accept: \"image/*\" })}>\n          Upload Image\n      </Button>\n        <Scrollbars autoHeight>\n          {files ? (\n            <img\n              id=\"target-component\"\n              src={files?.source}\n              alt=\"preview\"\n              style={{\n                filter: `blur(${blurVal}px) brightness(${brightVal}%)`,\n              }}\n            />\n          ) : (\n              <div>Upload image before editing.</div>\n            )}\n        </Scrollbars>\n      </div>\n      <div>\n        <div>\n          <h4>Blur</h4>\n          <Slider\n            axis=\"x\"\n            xstep={0.1}\n            xmin={0}\n            xmax={20}\n            x={blurVal}\n            onChange={({ x }) => setBlurVal(parseFloat(x, 10))}\n          />\n        </div>\n        <div>\n          <h4>Brightness</h4>\n          <Slider\n            axis=\"x\"\n            xmin={0}\n            xmax={100}\n            x={brightVal}\n            onChange={({ x }) => setBrightVal(parseInt(x, 10))}\n          />\n        </div>\n        <Button onClick={() => download()}>Download</Button>\n      </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}